name: Update Documentation

# This file should be placed in the .github/workflows directory of your React website repository

on:
  repository_dispatch:
    types: [update-documentation]
  
  # Also allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to rebuild documentation for'
        required: false
        default: 'latest'

jobs:
  rebuild-website:
    name: Rebuild Documentation Website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
            echo "Version from dispatch event: ${{ github.event.client_payload.version }}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "Version from manual input: ${{ github.event.inputs.version }}"
          else
            echo "VERSION=latest" >> $GITHUB_ENV
            echo "No specific version, using 'latest'"
          fi

      - name: Check documentation exists
        run: |
          if [[ ! -d "public/docs/api/$VERSION" && "$VERSION" != "latest" ]]; then
            echo "Documentation for version $VERSION not found!"
            exit 1
          fi
          
          echo "Found documentation for version $VERSION"
          if [[ -d "public/docs/api/$VERSION/api-docs" ]]; then
            echo "API documentation exists"
            ls -la "public/docs/api/$VERSION/api-docs"
          else
            echo "API documentation directory not found - maybe directory structure is different?"
            ls -la "public/docs/api/$VERSION"
          fi
          
          if [[ -f "public/docs/api/$VERSION/godoc-config.json" ]]; then
            echo "Documentation config exists"
            cat "public/docs/api/$VERSION/godoc-config.json"
          else
            echo "Documentation config not found"
          fi

      - name: Install dependencies
        run: npm ci
      
      - name: Update documentation metadata
        run: |
          # This step would update any internal metadata in your React app
          # For example, you might have a JSON file with available versions
          # or other documentation-related information
          
          # Example (modify as needed for your app architecture):
          if [[ -f "src/docs/metadata.json" ]]; then
            echo "Updating documentation metadata..."
            TMP=$(mktemp)
            jq --arg ver "$VERSION" '.latestDocVersion = $ver' src/docs/metadata.json > $TMP
            mv $TMP src/docs/metadata.json
          fi
      
      - name: Build React app
        run: npm run build
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build # or dist, depending on your build output
          branch: gh-pages
          
      # Alternatively, if using a different hosting service, replace the step above
      # with the appropriate deployment step, e.g., Netlify, Vercel, etc.
      
      # Example for Netlify:
      # - name: Deploy to Netlify
      #   uses: netlify/actions/cli@master
      #   with:
      #     args: deploy --dir=build --prod
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }} 